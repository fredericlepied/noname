# -*- python -*-

cli = hpacucli.Cli(debug=True)
cli.launch()

run('dmsetup remove_all || :')

disk1 = var['disk1']
disk2 = var['disk2']
disk3 = var['disk3']
disk4 = var['disk4']

slot = 'slot=' + var['slot1']

try:
    print '# Removing disks'
    cli.ctrl_delete(slot)
except:
    print 'Failed to delete array, maybe none already existing'
    print 'We can continue to see if we can create everything else'
bootable_disk = cli.ctrl_create_ld(slot, (disk1,) , raid='0')
print '# Creating disk%d (%s)' % (1, bootable_disk)
var_nodev = bootable_disk.replace('/dev/','')
print "# -> %s" % bootable_disk
print
print '# Creating Operating System disk'
print "Creating Partition"
run('dd if=/dev/zero of=%s bs=1M count=100' % bootable_disk)
run('hdparm -z %s' % bootable_disk)
run('parted -a optimal --script %s mktable msdos' % bootable_disk)
run('parted -a optimal --script %s mkpart primary ext2 0%% 256' % bootable_disk)
run('parted --script %s set 1 boot on' % bootable_disk)
run('parted -a optimal --script %s mkpart primary 257 100%%' % bootable_disk)
run('parted --script %s set 2 lvm on' % bootable_disk)
run('parted --script %s align-check optimal 1' % bootable_disk)
run('parted --script %s align-check optimal 2' % bootable_disk)
print "Creating LVM"
run('dmsetup remove_all || :')
run('mkdir -p /run/lvm; lvmetad -s /run/lvm/lvmetad.socket || :')
run('pvcreate -ff -y --dataalignment 512k %s%d' % (bootable_disk, 2))
run('vgcreate -f -y --dataalignment 512k rootfs %s%d' % (bootable_disk, 2))
run('lvcreate rootfs -n slash -L 40G --verbose < /dev/null')
run('lvcreate rootfs -n swap -L 2G --verbose < /dev/null')
print "Creating FS"
run('mkfs.ext4 -L boot -m 0 %s%d' % (bootable_disk, 1))
run('mkfs.ext4 -L slash -m 0 -O extent -E stride=32,stripe_width=32 /dev/mapper/rootfs-slash')
run('mkswap -f /dev/mapper/rootfs-swap')
run('mount LABEL=slash /chroot')
run('mkdir /chroot/etc /chroot/boot')
run('mount LABEL=boot /chroot/boot')
fstab = open('/post_rsync/etc/fstab', 'a')
fstab.write('''
/dev/disk/by-id/dm-name-rootfs-swap none swap sw 0 0
LABEL=slash / ext4 defaults 0 1
LABEL=boot /boot ext4 defaults 0 2
''')
print

print '# Creating Ceph disks'
for idx in range(2, 5):
    disk_name = 'disk%d' % idx
    slot_name = 'slot=' + var['slot%d' % idx]
    var[disk_name] = cli.ctrl_create_ld(slot_name, (var[disk_name],), raid='0')
    print '# Creating disk%d (%s)' % (idx, var[disk_name])
    var_nodev = var[disk_name].replace('/dev/','')
    print "# -> %s" % var[disk_name]
    print
    run('dd if=/dev/zero of=%s bs=1M count=100' % var[disk_name])
    run('hdparm -z %s' % var[disk_name])
    run('parted -a optimal --script %s mktable gpt' % var[disk_name])
    run('parted -a optimal --script %s mkpart ceph 0%% 200000' % var[disk_name])
    run('dmsetup remove_all || /bin/true')
    run('mkfs.xfs -f -d agcount=%s -l size=1024m -n size=64k -i size=2048 %s1' % (var['nbcpu'], var[disk_name]))
    run('lvcreate rootfs -n journal-%s1 -L 8G --verbose < /dev/null' % (var_nodev) )

ipmi.setup_user(var['ipmi-channel'], var['ipmi-user'], var['ipmi-password'])

config('/etc/hostname').write('''
%(hostname)s
''' % var)

config('/etc/sysconfig/network').write('''
NETWORKING=yes
NETWORKING_IPV6=yes
HOSTNAME=%(hostname)s
''' % var)

config('/etc/sysconfig/network-scripts/ifcfg-eth0').write('''
DEVICE=eth0
BOOTPROTO=static
ONBOOT=yes
IPADDR0=%(ip)s
PREFIX0=24
GATEWAY=%(gateway)s
RESOLV_MODS=no
LINK_DETECTION_DELAY=6
HWADDR=%(mac)s
''' % var)

config('/etc/sysconfig/network-scripts/ifcfg-eth1').write('''
DEVICE=eth1
BOOTPROTO=dhcp
ONBOOT=yes
PERSISTENT_DHCLIENT=yes
RESOLV_MODS=no
LINK_DETECTION_DELAY=6
HWADDR=%(mac1)s
''' % var)

config('/etc/resolv.conf').write('''
search ring.enovance.com
nameserver 94.143.114.197
nameserver 94.143.117.197
nameserver 88.190.240.75
nameserver 198.154.188.4
nameserver 10.151.68.201
''')

config('/etc/udev/rules.d/60-schedulers.rules').write('''
#set deadline scheduler for non-rotating disks
ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="0", ATTR{queue/scheduler}="deadline"

# set cfq scheduler for rotating disks
ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="1", ATTR{queue/scheduler}="cfq"
''')

config('/etc/hostname').write('''%(hostname)s.%(domainname)s
''' % var)

if 'inject_facts' in dir():
    inject_facts(var)

set_role('@ROLE@', '@VERSION@', bootable_disk)
